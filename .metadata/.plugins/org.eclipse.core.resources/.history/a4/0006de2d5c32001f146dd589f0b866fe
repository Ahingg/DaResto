package threads;

import mediator.Mediator;
import model.Customer;
import model.Waiter;
import state.customer_state.OrderState;

public class CustomerThread extends Thread{
	
	private Customer customer;
	private Mediator mediator;
	private boolean onPause = false;
	public CustomerThread(Customer customer, Mediator mediator) {
		this.customer = customer;
		this.mediator = mediator;
	}
	
	public String getCustomerState() {
		
		return customer.getState().getPrintFormat();
	}
	public Customer getCustomer() {
		return this.customer;
	}
	
	@Override
	public void run() {
		// TODO Auto-generated method stub
		customer.setState(new OrderState(customer));
		
		if(customer.getState() != null) System.out.println(customer.getState().getPrintFormat());
		else System.out.println("a");
		OrderState o =(OrderState) customer.getState();
		o.startBomb();
		//customer.getState() instanceof OrderState
		while(true ) {
			if(onPause) continue;
			if(customer.getTolerance() <= 0) {
				mediator.customerRageLeave(this);
				return;
			}
			
			order();
			try {
				Thread.sleep(100);
				
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
	}
	
	private void order() {
		mediator.customerOrder(customer);
	}
	
}
