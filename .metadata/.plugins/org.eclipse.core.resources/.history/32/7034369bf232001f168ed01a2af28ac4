package state.waiter_state;

import model.Chef;
import model.Customer;
import model.Waiter;
import state.WaiterState;
import state.chef_state.CookingState;
import state.chef_state.DoneState;

public class BringOrderState implements WaiterState{
	private Chef chef;

	public BringOrderState(Chef chef, Customer customer, Waiter waiter) {
		// TODO Auto-generated constructor stub
		this.chef = chef;
		
		if (customer != null) {
			new Thread(() -> {
				try {
					Thread.sleep(1000);
					if((chef.getState() instanceof state.chef_state.IdleState)) {
						chef.setState(new CookingState(chef, customer));
						waiter.setState(new IdleState());
					}
						
					else if((chef.getState() instanceof DoneState)) {
						DoneState d = (DoneState) chef.getState();
						waiter.setState(new ServeState(d.customer, chef, waiter));
						chef.setState(new CookingState(chef, customer));
					}
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}).start();;
		}
	}
	
	
	
	@Override
	public void reset(Waiter waiter) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public String getPrintFormat() {
		// TODO Auto-generated method stub
		return "bring order<" + chef.getName() + ">";
	}

	@Override
	public void changeState(WaiterState state) {
		// TODO Auto-generated method stub
		
	}
	
//	public Waiter getWaiter() {return waiter;}
//	public Chef getChef() { return chef; }
//	public Customer getCustomer (){ return customer; }

}
