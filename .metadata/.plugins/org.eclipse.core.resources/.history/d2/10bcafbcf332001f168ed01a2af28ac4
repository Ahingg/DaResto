package state.waiter_state;

import model.Customer;
import model.Waiter;
import state.WaiterState;
import threads.CustomerToleranceCounter;

public class WaitCookState  implements WaiterState{
	public WaitCookState(Customer customer, Waiter waiter) {
		// TODO Auto-generated constructor stub
		if(!waiter.getMediator().waiterFindCook(customer, waiter)) {
			CustomerToleranceCounter counter = new CustomerToleranceCounter(4, customer);
			counter.start();
			
			Thread a = new Thread(() -> {
				try {
					do {
						if(waiter.getMediator().waiterFindCook(customer, waiter)) {
							counter.stopCounting();
							counter.interrupt();
						}
						Thread.sleep(100);
					}while(waiter.getState() instanceof WaitCookState);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} 
			});
			a.setName("Thread kecil nunggu chef" + waiter.getName());
			a.start();
		}
	}
	

	@Override
	public void reset(Waiter waiter) {
		// TODO Auto-generated method stub
		waiter.setState(new IdleState());
	}

	@Override
	public String getPrintFormat() {
		// TODO Auto-generated method stub
		return "wait cook";
	}


	@Override
	public void changeState(WaiterState state) {
		// TODO Auto-generated method stub
		
	}

}
